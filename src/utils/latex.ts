import path from 'node:path';
import process from 'node:process';
import fs from 'node:fs';
import { execaSync } from 'execa';

type CompileLatexProps = {
	latexFilePath: string;
	outputDirectory: string;
};
export function compileLatex({
	latexFilePath,
	outputDirectory,
}: CompileLatexProps) {
	const workingDir = path.dirname(latexFilePath);
	const outDir = path.resolve(workingDir, outputDirectory);

	process.chdir(workingDir);
	fs.mkdirSync(outDir, { recursive: true });

	const execaOptions = { stdio: 'inherit' } as const;
	const filename = path.basename(latexFilePath, '.tex');

	// Cleans the old artifacts generated by pythontex
	execaSync(
		'rm',
		[
			'-rf',
			`${outDir}/pythontex-files-${filename}`,
			`${outDir}/${filename}.pytxcode`,
		],
		execaOptions
	);

	execaSync(
		'lualatex',
		[
			'--shell-escape',
			'--enable-write18',
			'-synctex=1',
			'-interaction=nonstopmode',
			'-file-line-error',
			`-output-directory=${outDir}`,
			latexFilePath,
		],
		execaOptions
	);

	// If there's no Python outputted, there's no need to run `pythontex`
	if (!fs.existsSync(`${outDir}/${filename}.pytxcode`)) {
		return;
	}

	execaSync(
		'cp',
		[`${filename}.tex`, `${outDir}/${filename}.tex`],
		execaOptions
	);

	execaSync('pythontex', [`${outDir}/${filename}.tex`], execaOptions);

	execaSync(
		'lualatex',
		[
			'--shell-escape',
			'--enable-write18',
			'-synctex=1',
			'-interaction=nonstopmode',
			'-file-line-error',
			'-output-directory=out',
			`${outDir}/${filename}.tex`,
		],
		execaOptions
	);
}
